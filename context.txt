    
    Стек и каркас
Выбери язык: Python (aiogram/pyTelegramBotAPI) или Node.js (telegraf/grammY).
Структура: app/ (бот, роутинг), services/ (MCP-клиенты), memory/, vectordb/, configs/, scripts/, conversations/.
Репозиторий
Создай GitHub-репо, зафиксируй лицензию, .gitignore, базовые файлы.
Подключи проект к Cursor.
    
    Telegram-бот
Зарегистрируй бота у BotFather, получи токен.
Определи команды: /help, /health, /today, /plan, /addtask.
Базовый бот и команды
Подними минимальный бот, реализуй /help и /health.
    
    Оформи ответы в стиле MVP, учитывай форматирование.
MCP-инструменты (3 шт.)
Google Calendar: чтение/создание событий, список на сегодня/неделю.
Gmail: отправка и поиск писем (шаблоны).
Google Sheets или Notion: CRUD задач (Backlog/Today/Done).
Сделай адаптеры с единым интерфейсом и обработку ошибок/таймаутов.
    
    Память диалога
Сессионная память: хранение истории и предпочтений пользователя.
Выбор хранилища: JSON для MVP, затем SQLite/Redis.
Векторная база знаний
Выбери FAISS/Chroma, индексация заметок и SOP’ов.
Коннектор: upsert(text, meta), search(query, k).
Встраивание: open-source модели (например, Instructor/All-MiniLM) или API.

    Потоки/фичи
/today: дайджест встреч (Calendar) + задачи (Sheets/Notion) + погода по желанию.
/plan: создать план дня из встреч + свободные слоты, предложить задачи.
/addtask: добавить задачу в выбранный список.
Конфигурация и секреты
.env + .env.example без секретов, загрузка конфигов.
Ротация токенов, пермишены OAuth.

    Логи и наблюдаемость
Структурированные логи, healthcheck, метрики (опционально).
Контейнеризация и деплой
Dockerfile, docker-compose.yml.
ВМ Ubuntu/Debian, автозапуск через systemd/Compose restart:always.

    Документация
README: установка, токены, переменные окружения, запуск.
Краткий отчёт о назначении и реализации.
Папка conversations/ с экспортом истории из Cursor.